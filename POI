package com.SAXParsers;
import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.poi.xssf.eventusermodel.XSSFReader;
import org.apache.poi.xssf.model.SharedStringsTable;
import org.apache.poi.xssf.model.StylesTable;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.BuiltinFormats;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;

import com.cambia.runner.Constants;
import com.cambia.runner.util.TestMemory;
import com.cambia.runner.util.Utilities;

public class ReadExcellFileUsingSAXParser {
	private static boolean printProgress = false;
	private static ArrayList<String> row1 = new ArrayList<String>();
	private static ArrayList<String> row2 = new ArrayList<String>();
	
	private void processOneSheet(String filename, String sheet_rID) throws Exception {
		OPCPackage pkg = OPCPackage.open(filename);
		XSSFReader r = new XSSFReader( pkg );
		SharedStringsTable sst = r.getSharedStringsTable();

		XMLReader parser = fetchSheetParser(sst);

		// To look up the Sheet Name / Sheet Order / rID,
		//  you need to process the core Workbook stream.
		// Normally it's of the form rId# or rSheet#
		InputStream sheet2 = r.getSheet(sheet_rID);
		InputSource sheetSource = new InputSource(sheet2);
		parser.parse(sheetSource);
		sheet2.close();
		
		pkg.close();
	}

	private void processAllSheets(String filename) throws Exception {
		OPCPackage pkg = OPCPackage.open(filename);
		XSSFReader r = new XSSFReader( pkg );
		SharedStringsTable sst = r.getSharedStringsTable();
		
		XMLReader parser = fetchSheetParser(sst);

		Iterator<InputStream> sheets = r.getSheetsData();
		while(sheets.hasNext()) {
			System.out.println("Processing new sheet:\n");
			InputStream sheet = sheets.next();
			InputSource sheetSource = new InputSource(sheet);
			parser.parse(sheetSource);
			sheet.close();
			System.out.println("");
		}
	}

	private XMLReader fetchSheetParser(SharedStringsTable sst) throws SAXException {
		XMLReader parser =
			XMLReaderFactory.createXMLReader(
					"org.apache.xerces.parsers.SAXParser"
			);
		ContentHandler handler = new SheetHandler(sst);
		parser.setContentHandler(handler);
		return parser;
	}

private static class SheetHandler extends DefaultHandler {
	private SharedStringsTable sst;
	private String lastContents;
	private boolean nextIsString;
	
	private SheetHandler(SharedStringsTable sst) {
		this.sst = sst;
	}
	
	
	public void startElement(String uri, String localName, String name,
			Attributes attributes) throws SAXException {
		// c => cell
		if(name.equals("c")) {
			// Print the cell reference
			String cellRef = attributes.getValue("r");
			
			//if(printProgress){
			System.out.print(cellRef + " - ");
			//}
			for(int i = 97;i<97+26;i++){
				System.out.println(attributes.getValue(""+(char)i));
			}
			// Figure out if the value is an index in the SST
			String cellType = attributes.getValue("t");
			//org.apache.poi.xssf.usermodel.XSSFDataFormat ss = new  
			//attributes.
			if(cellType != null && cellType.equals("s")) {
				nextIsString = true;
			} else {
				nextIsString = false;
			}
			
			if(cellRef.charAt(cellRef.length()-1)=='1'){
			row1.add(lastContents);
			}
			if(cellRef.charAt(cellRef.length()-1)=='2'){
				row2.add(lastContents);
			}
		}
		
		// Clear contents cache
		lastContents = "";
	}
	
	public void endElement(String uri, String localName, String name)
			throws SAXException {
		// Process the last contents as required.
		// Do now, as characters() may be called more than once
		if(nextIsString) {
			
			int idx = Integer.parseInt(lastContents);
			XSSFRichTextString ss = new XSSFRichTextString(sst.getEntryAt(idx));
			//System.out.println(ss.getCTRst());
			lastContents = new XSSFRichTextString(sst.getEntryAt(idx)).toString();
			nextIsString = false;
		}else{
			
		}

		// v => contents of a cell
		// Output after we've seen the string contents
		if(name.equals("v")) {
			if(printProgress){
			System.out.println(lastContents);
			}
		}
	}

	public void characters(char[] ch, int start, int length)
			throws SAXException {
//		for(char xx : ch){
//			System.out.println(" ------------ "+ xx);
//		}
		lastContents += new String(ch, start, length);
	}
}


public static HashMap<String, Object> readFile(String filePath) throws Exception
{
System.out.println("inside read file");
	
	ReadExcellFileUsingSAXParser example = new ReadExcellFileUsingSAXParser();
	example.processOneSheet(filePath,"rId1");
	ArrayList<ArrayList<String>> excelFile = new ArrayList<ArrayList<String>>();
	
	excelFile.add(row1);
	excelFile.add(row2);
	
	
	
	
	String fileName = new File(filePath).getName();
	
	HashMap<String, Object> excelMap = new  HashMap<String, Object>();
	excelMap.put("fileName", fileName);
	excelMap.put("excelFile", excelFile);

	
	return excelMap;
}

public static void main(String[] args) throws Exception {
	String location = "C:\\Users\\r627884\\Desktop\\LifeMap\\2016\\11th Feb 2016\\Input\\Copy of Dental 14 Rate Model 20150701v2 2d_play _CNWork (Lily Sample 1).xlsm";
	ReadExcellFileUsingSAXParser example = new ReadExcellFileUsingSAXParser();
	example.processOneSheet(location,"rId1");

	//example.processOneSheet(location,"rId2");
	System.out.println();
	System.out.println("row1.size() : "+row1.size());
	//System.out.println("row2.size() : "+row2.size());
	Map<String, String> result = Constants.createMap();
	int i=0;
	System.out.println("first :"+row1.get(0));
	for(String s: row1){
		System.out.println(s);
		System.out.println(Utilities.isKeyFound(result, s));
		i++;
	}
	System.out.println(i);
	
	TestMemory.printMemory();
	//example.processAllSheets(location);
}
}
